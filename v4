 --[[

██╗░░░░░░█████╗░░██████╗██╗██╗░░██╗
██║░░░░░██╔══██╗██╔════╝██║╚██╗██╔╝
██║░░░░░██║░░██║╚█████╗░██║░╚███╔╝░
██║░░░░░██║░░██║░╚═══██╗██║░██╔██╗░
███████╗╚█████╔╝██████╔╝██║██╔╝╚██╗
╚══════╝░╚════╝░╚═════╝░╚═╝╚═╝░░╚═╝

]]
-- resolves
-- color correction
-- advanced ping prediction
-- better player detection
-- just better!
local RunService = game:GetService("RunService")

local function zeroOutYVelocity(hrp)
    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
    hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        local hrp = character:WaitForChild("HumanoidRootPart")
        zeroOutYVelocity(hrp)
    end)
end

local function onPlayerRemoving(player)
    player.CharacterAdded:Disconnect()
end

game.Players.PlayerAdded:Connect(onPlayerAdded)
game.Players.PlayerRemoving:Connect(onPlayerRemoving)

RunService.Heartbeat:Connect(function()
    pcall(function()
        for i, player in pairs(game.Players:GetChildren()) do
            if player.Name ~= game.Players.LocalPlayer.Name then
                local hrp = player.Character.HumanoidRootPart
                zeroOutYVelocity(hrp)
            end
        end
    end)
end)
plr = game:GetService("Players").LocalPlayer
down = true

function onButton1Down(mouse)
    down = true
    while down do
        if not down then
            break
        end
        local char = plr.Character
        char.HumanoidRootPart.Velocity = char.HumanoidRootPart.CFrame.lookVector * 190
        wait()
    end
end
local new = {
    main = {
        Mario = true,
        Prediction = 0.1211,
        Part = "HumanoidRootPart", -- Head, UpperTorso, HumanoidRootPart, LowerTorso, RightFoot, LeftFoot, RightArm, LeftArm
        Key = "q",
        Notifications = true,
        AirshotFunc = true
    },
    Tracer = {
        TracerThickness = 2.7,
        TracerTransparency = 1.1,
        TracerColor = Color3.fromRGB(255, 255, 255)
    }
}

local CurrentCamera = game:GetService "Workspace".CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()
local RunService = game:GetService("RunService")
local Plr = game.Players.LocalPlayer
local Line = Drawing.new("Line")
local Inset = game:GetService("GuiService"):GetGuiInset().Y

-- Set prediction value based on player's ping
local function SetPrediction(ping)
    if ping >= 0 and ping <= 1000 then
        new.main.Prediction = 0.1211
    elseif ping > 1000 and ping <= 2000 then
        new.main.Prediction = 0.1555
    else
    end
end
-- use this for your own auto prediction
-- Check player's ping and set initial prediction value
local function InitPrediction()
    local ping = game:GetService("Players").LocalPlayer:Ping()
    SetPrediction(ping)
end

Mouse.KeyDown:Connect(function(KeyPressed)
    if KeyPressed == (new.main.Key) then
        if new.main.Mario == true then
            new.main.Mario = false
            if new.main.Notifications == true then
                Plr = FindClosestUser()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Off",
                    Text = "Toggled Off"
                })
            end
        else
            Plr = FindClosestUser()
            new.main.Mario = true
            if new.main.Notifications == true then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "On",
                    Text = "Target:" .. tostring(Plr.Character.Humanoid.DisplayName)
                })
            end
        end
    end
end)
function FindClosestUser()
    local closestPlayer
    local shortestDistance = math.huge

    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
            v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end
RunService.Stepped:connect(function()
    if new.main.Mario == true then
        local partPosition = Plr.Character[new.main.Part].Position
        local velocity = Plr.Character.HumanoidRootPart.Velocity * new.main.Prediction
        local endPoint = partPosition + velocity

        -- Check if the endPoint is behind the camera
        local cameraCFrame = CurrentCamera.CFrame
        local cameraLookVector = cameraCFrame.LookVector
        local cameraPosition = cameraCFrame.Position
        local cameraToPoint = (endPoint - cameraPosition).Unit
        local dotProduct = cameraLookVector:Dot(cameraToPoint)

        -- Check if the endPoint is behind the player's torso
        local torso = Plr.Character:FindFirstChild("HumanoidRootPart")
        local torsoPosition = torso.Position
        local playerToPoint = (endPoint - torsoPosition).Unit
        local cameraToTorso = (torsoPosition - cameraPosition).Unit
        local dotProduct2 = cameraLookVector:Dot(cameraToTorso)
        if dotProduct < 0 or (dotProduct2 > 0 and playerToPoint:Dot(cameraToTorso) < 0) then
            Line.Visible = false
            return
        end

        local Vector = CurrentCamera:WorldToViewportPoint(endPoint)
        Line.Color = new.Tracer.TracerColor                                                                        
        Line.Thickness = new.Tracer.TracerThickness
        Line.Transparency = new.Tracer.TracerTransparency

        Line.From = Vector2.new(Mouse.X, Mouse.Y + Inset)
        Line.To = Vector2.new(Vector.X, Vector.Y)
        Line.Visible = true
    else
        Line.Visible = false
    end
end)




local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if new.main.Mario and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        args[3] = Plr.Character[new.main.Part].Position +
                      (Plr.Character[new.main.Part].Velocity * new.main.Prediction)
        return old(unpack(args))
    end
    return old(...)
end)
if new.main.AirshotFunc == true then
    if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
        settings.main.Part = "RightFoot"
    else
        Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
            if new == Enum.HumanoidStateType.Freefall then
                settings.main.Part = "RightFoot"
            else
                settings.main.Part = "LowerTorso"
            end
        end)
    end
end
-- no jump cooldown
if not game.IsLoaded(game) then 
    game.Loaded.Wait(game.Loaded);
end
local IsA = game.IsA;
local newindex = nil 
newindex = hookmetamethod(game, "__newindex", function(self, Index, Value)
    if not checkcaller() and IsA(self, "Humanoid") and Index == "JumpPower" then 
        return
    end
    
    return newindex(self, Index, Value);
end)
-- better color
-- // Created by rice

local l = game:GetService("Lighting")

local col = Instance.new("ColorCorrectionEffect", l)
col.Brightness = 0
col.Contrast = 0.01
col.Saturation = 0.67
-- anti slow
local mt = getrawmetatable(game)
local backup
backup = hookfunction(mt.__newindex, newcclosure(function(self, key, value)
if key == "WalkSpeed" and value < 16 then
value = 16
end
return backup(self, key, value)
end))
